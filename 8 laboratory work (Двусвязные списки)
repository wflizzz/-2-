addXEnd (int x) – функция добавление элемента x в конец списка.
#include <iostream> // Подключение стандартной библиотеки ввода-вывода
#include <fstream> // Подключение библиотеки для работы с файлами\#include <sstream>
#include <sstream>
std::string convertToString(int x) {
    std::stringstream ss;
    ss << x;
    return ss.str();
}
using namespace std; // Использование стандартного пространства имен

const unsigned int NAME_SIZE = 30; // Определение размера массива для имени
const unsigned int CITY_SIZE = 20; // Определение размера массива для города

struct Address // Объявление структуры для элементов списка
{
    char name[NAME_SIZE]; // Имя
    char city[CITY_SIZE]; // Город
    Address* next; // Указатель на следующий элемент списка
    Address* prev; // Указатель на предыдущий элемент списка
};

int menu(void) // Функция отображения меню и получения выбора пользователя
{
    char s[80]; // Объявление массива символов
    int c; // Переменная для хранения выбора пользователя
    cout << endl;
    cout << "1. Ввод имени" << endl;
    cout << "2. Удаление имени" << endl;
    cout << "3. Вывод на экран" << endl;
    cout << "4. Поиск" << endl;
    cout << "5. Сохранить в файл" << endl;
    cout << "6. Загрузить из файла" << endl;
    cout << "7. Добавить число в конец списка" << endl; 
    cout << "8. Выход" << endl;
    cout << endl;
    do
    {
        cout << "Ваш выбор: ";
        cin.sync(); // Синхронизация ввода
        gets_s(s); // Получение ввода пользователя в виде строки
        cout << endl;
        c = atoi(s); // Преобразование строки в целое число
    } while (c < 0 || c > 7); // Повторять, пока выбор пользователя не будет от 1 до 7
    return c; // Возвращаем выбор пользователя
}

void insert(Address* e, Address** phead, Address** plast) // Функция добавления элемента в конец списка
{
    Address* p = *plast; // Указатель на последний элемент списка
    if (*plast == NULL) // Если список пуст
    {
        e->next = NULL; // Устанавливаем указатель на следующий элемент в NULL
        e->prev = NULL; // Устанавливаем указатель на предыдущий элемент в NULL
        *plast = e; // Устанавливаем указатель plast на новый элемент
        *phead = e; // Устанавливаем указатель phead на новый элемент
        return;
    }
    else // Если список не пуст
    {
        p->next = e; // Устанавливаем указатель следующего элемента последнего элемента на новый элемент
        e->next = NULL; // Устанавливаем указатель следующего элемента нового элемента в NULL
        e->prev = p; // Устанавливаем указатель предыдущего элемента нового элемента на последний элемент
        *plast = e; // Устанавливаем указатель plast на новый элемент
    }
}

Address* setElement() // Функция создания нового элемента списка и ввода его значений с клавиатуры
{
    Address* temp = new  Address(); // Выделение памяти под новый элемент
    if (!temp) // Если память не выделена
    {
        cerr << "Ошибка выделения памяти памяти"; // Вывод сообщения об ошибке
        return NULL; // Возврат из функции
    }
    cout << "Введите имя: ";
    cin.getline(temp->name, NAME_SIZE - 1, '\n'); // Ввод имени
    cin.ignore(cin.rdbuf()->in_avail()); // Очистка буфера ввода
    cin.clear(); // Очистка флагов ошибок ввода
    cout << "Введите город: ";
    cin.getline(temp->city, CITY_SIZE - 1, '\n'); // Ввод города
    cin.ignore(cin.rdbuf()->in_avail()); // Очистка буфера ввода
    cin.clear(); // Очистка флагов ошибок ввода
    temp->next = NULL; // Устанавливаем указатель следующего элемента в NULL
    temp->prev = NULL; // Устанавливаем указатель предыдущего элемента в NULL
    return temp; // Возвращаем созданный элемент
}

void outputList(Address** phead, Address** plast) // Функция вывода списка на экран
{
    Address* t = *phead; // Указатель на начало списка
    while (t) // Пока не достигнут конец списка
    {
        cout << t->name << ' ' << t->city << endl; // Выводим имя и город текущего элемента
        t = t->next; // Переходим к следующему элементу списка
    }
    cout << "" << endl; // Вывод пустой строки для разделения
}

void find(char name[NAME_SIZE], Address** phead) // Функция поиска имени в списке
{
    Address* t = *phead; // Указатель на начало списка
    while (t) // Пока не достигнут конец списка
    {
        if (!strcmp(name, t->name)) break; // Если найдено совпадение с именем, прерываем цикл
        t = t->next; // Переходим к следующему элементу списка
    }
    if (!t) // Если имя не найдено
        cerr << "Имя не найдено" << endl; // Выводим сообщение об ошибке
    else
        cout << t->name << ' ' << t->city << endl; // Выводим найденное имя и город
}

void delet(char name[NAME_SIZE], Address** phead, Address** plast) // Функция удаления имени из списка
{
    struct Address* t = *phead; // Указатель на начало списка
    while (t) // Пока не достигнут конец списка
    {
        if (!strcmp(name, t->name))  break; // Если найдено совпадение с именем, прерываем цикл
        t = t->next; // Переходим к следующему элементу списка
    }
    if (!t) // Если имя не найдено
        cerr << "Имя не найдено" << endl; // Выводим сообщение об ошибке
    else
    {
        if (*phead == t) // Если удаляемый элемент - первый в списке
        {
            *phead = t->next; // Переопределяем указатель на начало списка
            if (*phead)
                (*phead)->prev = NULL; // Если список не пуст, устанавливаем указатель предыдущего элемента первого элемента в NULL
            else
                *plast = NULL; // Если список пуст, устанавливаем указатель plast в NULL
        }
        else // Если удаляемый элемент - не первый в списке
        {
            t->prev->next = t->next; // Переопределяем указатель следующего элемента предыдущего элемента удаляемого элемента
            if (t != *plast)
                t->next->prev = t->prev; // Если удаляемый элемент - не последний в списке, переопределяем указатель предыдущего элемента следующего элемента удаляемого элемента
            else
                *plast = t->prev; // Если удаляемый элемент - последний в списке, устанавливаем plast на предыдущий элемент
        }
        delete t; // Удаляем элемент
        cout << "Элемент удален" << endl; // Выводим сообщение об успешном удалении элемента
    }
}

void writeToFile(Address** phead) // Функция сохранения списка в файл
{
    struct Address* t = *phead; // Указатель на начало списка
    FILE* fp; // Указатель на файл
    errno_t err = fopen_s(&fp, "mlist", "wb"); // Открываем файл для записи в бинарном режиме
    if (err) // Если возникла ошибка при открытии файла
    {
        cerr << "Файл не открывается" << endl; // Выводим сообщение об ошибке
        exit(1); // Выходим из программы с кодом ошибки
    }
    cout << "Сохранение в файл" << endl; // Выводим сообщение о начале сохранения в файл
    while (t) // Пока не достигнут конец списка
    {
        fwrite(t, sizeof(struct Address), 1, fp); // Записываем текущий элемент в файл
        t = t->next; // Переходим к следующему элементу списка
    }
    fclose(fp); // Закрываем файл
}

void readFromFile(Address** phead, Address** plast) // Функция загрузки списка из файла
{
    struct Address* t; // Указатель на текущий элемент списка
    FILE* fp; // Указатель на файл
    errno_t err = fopen_s(&fp, "mlist", "rb"); // Открываем файл для чтения в бинарном режиме
    if (err) // Если возникла ошибка при открытии файла
    {
        cerr << "Файл не открывается" << endl; // Выводим сообщение об ошибке
        exit(1); // Выходим из программы с кодом ошибки
    }
    while (*phead) // Пока не достигнут конец списка
    {
        *plast = (*phead)->next; // Сохраняем указатель на следующий элемент списка
        delete* phead; // Удаляем текущий элемент списка
        *phead = *plast; // Переходим к следующему элементу списка
    }
    *phead = *plast = NULL; // Обнуляем указатели на начало и конец списка
    cout << "Загрузка из файла" << endl; // Выводим сообщение о начале загрузки из файла
    while (!feof(fp)) // Пока не достигнут конец файла
    {
        t = new Address(); // Выделяем память под новый элемент списка
        if (!t) // Если память не выделена
        {
            cerr << "Ошибка выделения памяти" << endl; // Выводим сообщение об ошибке
            return; // Выходим из функции
        }
        if (1 != fread(t, sizeof(struct Address), 1, fp)) break; // Читаем текущий элемент из файла
        insert(t, phead, plast); // Добавляем элемент в список
    }
    fclose(fp); // Закрываем файл
}

void addXEnd(int x, Address** phead, Address** plast)
{
    Address* e = new Address(); // Создаем новый элемент списка
    if (!e)
    {
        cerr << "Ошибка выделения памяти" << endl;
        return;
    }
    strcpy_s(e->name, ""); // Присваиваем значение пустой строки для имени
    strcpy_s(e->city, to_string(x).c_str()); // Преобразуем число x в строку и присваиваем его городу
    insert(e, phead, plast); // Добавляем элемент в конец списка
}

int main(void) // Главная функция
{
    Address* head = NULL; // Указатель на начало списка
    Address* last = NULL; // Указатель на конец списка
    setlocale(LC_CTYPE, "Rus"); // Установка локали для вывода на русском языке
    while (true) // Бесконечный цикл работы программы
    {
        switch (menu()) // Вызов функции меню и обработка выбора пользователя
        {
        case 1: insert(setElement(), &head, &last); // Добавление элемента в список
            break;
        case 2: {   char dname[NAME_SIZE]; // Объявление массива символов для хранения имени
            cout << "Введите имя: ";
            cin.getline(dname, NAME_SIZE - 1, '\n'); // Ввод имени для удаления
            cin.ignore(cin.rdbuf()->in_avail()); // Очистка буфера ввода
            cin.sync(); // Синхронизация ввода
            delet(dname, &head, &last); // Удаление элемента из списка
        }
              break;
        case 3:  outputList(&head, &last); // Вывод списка на экран
            break;
        case 4: {   char fname[NAME_SIZE]; // Объявление массива символов для хранения имени
            cout << "Введите имя: ";
            cin.getline(fname, NAME_SIZE - 1, '\n'); // Ввод имени для поиска
            cin.ignore(cin.rdbuf()->in_avail()); // Очистка буфера ввода
            cin.sync(); // Синхронизация ввода
            find(fname, &head); // Поиск элемента в списке
        }
              break;
        case 5:  writeToFile(&head); // Сохранение списка в файл
            break;
        case 6:  readFromFile(&head, &last); // Загрузка списка из файла
            break;
        case 7: {   int x;
            cout << "Введите число: ";
            cin >> x;
            addXEnd(x, &head, &last); // Вызов функции добавления числа в конец списка
            cin.ignore(cin.rdbuf()->in_avail());
            cin.clear();
        }
              break;
        case 8:  exit(0);
        default: exit(1);
        }
    }
    return 0;
}
