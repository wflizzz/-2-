Main.cpp:

#include <iostream>
#include "myQueue.h" 
using namespace std;

int main() {
    setlocale(LC_ALL, "Ru");
    int maxSize;
    cout << "Введите максимальный размер очереди: "; 
    cin >> maxSize; // Считываем максимальный размер очереди

    Queue queue(maxSize); // Создаем объект класса Queue с заданным максимальным размером

    int choice; //Ф-ция для выбора (меню)
    do {
        cout << "\nОперации с очередью:\n"; 
        cout << "1. Добавить элемент в очередь:\n";
        cout << "2. Удалить элемент из очереди:\n";
        cout << "3. Вывести очередь на экран:\n";
        cout << "4. Получить размер очереди:\n";
        cout << "5. Разделить очередь:\n";
        cout << "0. Выход\n";
        cout << "Выберите пункт меню: ";
        cin >> choice; // Считываем выбор пользователя

        switch (choice) { 
        case 1: {
            int item;
            cout << "Введите элемент очереди: "; 
            cin >> item; // Считываем элемент очереди
            queue.enqueue(item); // Добавляем элемент в очередь
            break;
        }
        case 2: {
            int item;
            cout << "Введите элемент для удаления: "; 
            cin >> item; // Считываем элемент, который нужно удалить из очереди

            bool found = false;
            int tempSize = queue.getSize(); // Сохраняем текущий размер очереди
            for (int i = 0; i < tempSize; ++i) { //Начало цикла для извлечения элемента из очереди
                int dequeuedItem = queue.dequeue(); // Извлекаем элемент из очереди
                if (dequeuedItem == item) { // Если извлеченный элемент совпадает с элементом для удаления
                    found = true; // Устанавливаем флаг найденного элемента (если фаунд тру убрать то программа будет пропускать строку с удаленным эл-том и будет перепрыгивание через строку)
                    break; 
                }
                else {
                    queue.enqueue(dequeuedItem); // Возвращаем элемент обратно в очередь
                }
            }

            if (!found) {
                cout << "Элемент " << item << " не найден в очереди." << endl; 
            }

            cout << "Оставшиеся элементы в очереди: ";
            queue.printQueue(); // Выводим оставшиеся элементы очереди
            break;
        }
        case 3:
            queue.printQueue(); // Выводим содержимое очереди на экран
            break;
        case 4:
            cout << "Размер очереди: " << queue.getSize() << endl; // Выводим размер очереди
            break;
        case 5: {
            Queue queue1(maxSize), queue2(maxSize); // Создаем две новые очереди
            queue.splitQueue(queue1, queue2); // Разделяем исходную очередь на четные и нечетные элементы
            cout << "Разделение очереди на две: " << endl;
            cout << "Очередь1 (четные элементы): ";
            queue1.printQueue(); // Выводим на экран очередь четных элементов
            cout << "Очередь2 (нечетные элементы): ";
            queue2.printQueue(); // Выводим на экран очередь нечетных элементов
            break;
        }
        case 0:
            cout << "Выход...\n"; // Выводим сообщение о выходе
            break;
        default:
            cout << "Неверный выбор. Пожалуйста, попробуйте еще раз.\n"; // Выводим сообщение о неверном выборе
        }
    } while (choice != 0); // Повторяем меню, пока пользователь не выберет выход

    return 0;
}

myQueue.h:

#ifndef MY_QUEUE_H
#define MY_QUEUE_H

#include <iostream>

class Queue {
private:
    int* array;
    int front;
    int rear;
    int capacity;
    int size;

public: //Публичные классы
    Queue(int capacity);
    ~Queue();

    bool isEmpty();
    bool isFull();
    void enqueue(int item);
    int dequeue();
    int getSize();
    void printQueue();
    void splitQueue(Queue& queue1, Queue& queue2);
};

#endif

Queue.cpp:

#include "myQueue.h" 
using namespace std;

// Конструктор класса Queue, инициализирует переменные
Queue::Queue(int capacity) {
    this->capacity = capacity; // Устанавливаем максимальную емкость очереди
    array = new int[capacity]; // Выделяем память под массив элементов очереди
    front = 0; // Устанавливаем указатель на начало очереди
    rear = -1; // Устанавливаем указатель на конец очереди
    size = 0; // Устанавливаем начальный размер очереди
}

// Деструктор класса Queue, освобождает память
Queue::~Queue() {
    delete[] array; // Освобождаем память, выделенную для массива элементов очереди (впрочем это можно удалить)
}

// Ф-ция проверяет, пуста ли очередь
bool Queue::isEmpty() {
    return size == 0; // Возвращаем true, если размер очереди равен 0
}

// Ф-ция проверяет, заполнена ли очередь
bool Queue::isFull() {
    return size == capacity; // Возвращаем true, если размер очереди равен ее емкости
}

// Ф-ция добавляет элемент в конец очереди
void Queue::enqueue(int item) {
    if (isFull()) { // Проверяем, заполнена ли уже очередь
        cout << "Очередь заполнена. Невозможно поставить в очередь." << endl;
        return;
    }
    rear = (rear + 1) % capacity; // Увеличиваем указатель на конец очереди (с учетом кольцевого заполнения)
    array[rear] = item; // Добавляем элемент в конец очереди
    size++; // Увеличиваем размер очереди на один 
}

// Ф-ция удаляет элемент из начала очереди и возвращает его
int Queue::dequeue() {
    if (isEmpty()) { // Проверяем, пуста ли очередь
        std::cout << "Очередь пуста. Невозможно удалить из очереди." << std::endl;
        return -1; 
    }
    int removedItem = array[front]; // Сохраняем значение элемента, который удаляем
    front = (front + 1) % capacity; // Обновляем указатель на начало очереди
    size--; // Уменьшаем размер очереди
    return removedItem; // Возвращаем удаленный элемент
}

// Ф-ция возвращает текущий размер очереди
int Queue::getSize() {
    return size; // Возвращаем количество элементов в очереди
}

// Ф-ция выводит содержимое очереди на экран
void Queue::printQueue() {
    if (isEmpty()) { // Проверяем, пуста ли очередь
        cout << "Очередь пуста." << endl;
        return;
    }
    int index = front; // Устанавливаем указатель на начало очереди
    for (int i = 0; i < size; i++) { // Проходим по всем элементам очереди
        cout << array[index] << " "; // Выводим элемент на экран
        index = (index + 1) % capacity; // Переходим к следующему элементу очереди
    }
    cout << endl;
}

// Ф-ция разделяет исходную очередь на две по условию
void Queue::splitQueue(Queue& queue1, Queue& queue2) {
    int tempSize = size; // Сохраняем начальный размер очереди
    for (int i = 0; i < tempSize; i++) { // Проходим по всем элементам очереди
        int item = dequeue(); // Извлекаем элемент из исходной очереди
        if (item % 2 == 0) { // Если элемент четный
            queue1.enqueue(item); // Добавляем в очередь четных элементов
        }
        else {
            queue2.enqueue(item); // Добавляем в очередь нечетных элементов
        }
    }
}
